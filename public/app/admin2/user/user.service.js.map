{"version":3,"sources":["admin2/user/user.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAOA;gBAIE,qBACsB,IAAU,EACV,QAAwB;oBADxB,SAAI,GAAJ,IAAI,CAAM;oBACV,aAAQ,GAAR,QAAQ,CAAgB;oBAJtC,iBAAY,GAAG,eAAe,CAAC;gBAIU,CAAC;gBAGlD,8BAAQ,GAAR,UAAS,MAAU;oBAAV,sBAAU,GAAV,UAAU;oBACf,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,YAAY,GAAG,yBAAsB,MAAM,CAAE,CAAE;yBACzD,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAE7C,CAAC;gBAED,yCAAyC;gBACvC,qEAAqE;gBACrE,2CAA2C;gBAC3C,8CAA8C;gBAEhD,GAAG;gBAEH,6BAAO,GAAP,UAAQ,IAAI,EAAE,MAAQ;oBAAR,sBAAQ,GAAR,UAAQ;oBAClB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,YAAY,GAAG,UAAO,MAAM,CAAE,EAAE,IAAI,CAAC,SAAS,CAAE,IAAI,CAAE,CAAE;yBACnE,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC7C,CAAC;gBAEO,iCAAW,GAAnB,UAAoB,GAAa;oBAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAG,CAAC;gBAC7B,CAAC;gBAEO,iCAAW,GAAnB,UAAqB,KAAU;oBAC3B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;wBAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;oBAC1E,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACpC,CAAC;gBAtCH;oBAAC,iBAAU,EAAE;;+BAAA;gBAwCb,kBAAC;YAAD,CAvCA,AAuCC,IAAA;YAvCD,qCAuCC,CAAA","file":"admin2/user/user.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/Rx';\r\nimport { StorageService } from '../../shared/storage/storage.service'; \r\n\r\n@Injectable()\r\nexport class UserService {\r\n  \r\n  private _apiUsersUrl = '/api/v1/users';\r\n\r\n  constructor(\r\n                private http: Http,\r\n                private _storage: StorageService) {}\r\n\r\n  \r\n  getUsers(userId = 0): Observable<any>{\r\n      return this.http.get( this._apiUsersUrl + `?resource=users&id=${userId}` )\r\n                      .map(this.extractData)\r\n                      .catch(this.handleError);\r\n      \r\n  }\r\n\r\n  //removeUser(userId): {//Observable<any>{\r\n    //   return this.http.delete( this._apiResponseUrl +'/'+ responseId )\r\n    //                   .map(this.extractData)\r\n    //                   .catch(this.handleError);\r\n      \r\n  //}\r\n\r\n  addUser(user, userId=0): Observable<any>{\r\n      return this.http.post( this._apiUsersUrl + `?id=${userId}`, JSON.stringify( user ) )\r\n                      .map(this.extractData)\r\n                      .catch(this.handleError);\r\n  }\r\n\r\n  private extractData(res: Response) {\r\n      return res.json() || { };\r\n  }\r\n\r\n  private handleError (error: any) {\r\n      let errMsg = (error.message) ? error.message :\r\n        error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n      return Observable.throw(errMsg);\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}