{"version":3,"sources":["admin2/user/add/add-user.component.ts"],"names":[],"mappings":"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","file":"admin2/user/add/add-user.component.js","sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit, OnDestroy  } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { StorageService } from '../../../shared/storage/storage.service';\r\nimport { NotificationsService } from 'angular2-notifications';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { CustomValidator } from '../../../shared/validator/custom-validator.service';\r\nimport { UserService } from '../user.service';\r\nimport { AddUserInterface } from './add-user.model';\r\nimport { BranchService } from '../../branch/branch.service';\r\nimport { ZoneService } from '../../zones/zones.service';\r\nimport { ConditionalValidator } from '../../../shared/validator/conditional-required.service';\r\n\r\n@Component({\r\n    selector: 'my-add-user',\r\n    template:\r\n   `\r\n   <simple-notifications [options]=\"_options\"></simple-notifications>\r\n\r\n   <my-content [title]=\"(_userId>0)? 'Edit User' : 'Add User'\">\r\n        <div class=\"content\">\r\n            <form autocomplete=\"off\" [formGroup]=\"form\" (ngSubmit)=\"add(form.value, form.valid)\" novalidate>\r\n\r\n                <div class=\"row\">\r\n\r\n                    <div class=\"col-md-6\">\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>First Name</label>\r\n                            <input type=\"text\" formControlName=\"first_name\" class=\"form-control\" placeholder=\"First name\">\r\n                            <small [hidden]=\"form.controls.first_name.pristine || !form.controls.first_name.hasError('required')\" class=\"inputError\">First name is required.</small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Email</label>\r\n                            <input type=\"email\" formControlName=\"email\" class=\"form-control\" placeholder=\"Email\">\r\n                            <small [hidden]=\"form.controls.email.pristine || !form.controls.email.hasError('required')\" class=\"inputError\">Email is required.</small>\r\n                            <small [hidden]=\"!form.controls.email.hasError('incorrectMailFormat')\" class=\"inputError\">Email format should be <i>example@example.com</i>.</small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Role</label>\r\n                            <select formControlName=\"role\" class=\"form-control\">\r\n                                <option value=\"branch\">Branch Manager</option>\r\n                                <option value=\"zonal\">Zonal/Regional Manager</option>\r\n                                <option value=\"admin\">Administrator</option>\r\n                            </select>\r\n                            <small [hidden]=\"form.controls.role.pristine || !form.controls.role.hasError('required')\" class=\"inputError\">User's role is required.</small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Company</label>\r\n                            <input type=\"text\" formControlName=\"company\" class=\"form-control\" placeholder=\"Last name\">\r\n                            <small [hidden]=\"form.controls.company.pristine || !form.controls.company.hasError('required')\" class=\"inputError\">Company is required.</small>\r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                    <div class=\"col-md-6\">\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Last Name</label>\r\n                            <input type=\"text\" formControlName=\"last_name\" class=\"form-control\" placeholder=\"Last name\">\r\n                            <small [hidden]=\"form.controls.last_name.pristine || !form.controls.last_name.hasError('required')\" class=\"inputError\">Last name is required.</small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Password</label>\r\n                            <input type=\"password\" formControlName=\"password\" class=\"form-control\" placeholder=\"Password\">\r\n                            <small [hidden]=\"form.controls.password.pristine || !form.controls.password.hasError('required')\" class=\"inputError\">Password is required.</small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\" *ngIf=\"form.get('role').value=='zonal'\">\r\n                            <label>Zone</label>\r\n                            <select formControlName=\"zone_id\" class=\"form-control\">\r\n                                <option [value]=\"''\">--Select Zone--</option>\r\n                                <option [value]=\"zone.id\" *ngFor=\"let zone of _zones\">{{zone.name}}</option>\r\n                            </select>\r\n                            <small [hidden]=\"form.controls.zone_id.pristine || !form.controls.zone_id.hasError('required')\" class=\"inputError\">Zone is required.</small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Branch</label>\r\n                            <select formControlName=\"branch_id\" class=\"form-control\">\r\n                                <option [value]=\"''\">--Select Branch--</option>\r\n                                <option [value]=\"branch.id\" *ngFor=\"let branch of _branches\">{{branch.name}}</option>\r\n                            </select>\r\n                            <small [hidden]=\"form.controls.branch_id.pristine || !form.controls.branch_id.hasError('required')\" class=\"inputError\">Branch name is required.</small>\r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                <button type=\"submit\" class=\"btn btn-info btn-fill pull-left\" [disabled]=\"!form.valid\">{{(_userId>0)?'Edit':'Add'}} User</button>\r\n                <div class=\"clearfix\"></div>\r\n            </form>\r\n        </div>\r\n    </my-content>\r\n    `\r\n})\r\n\r\nexport class AddUserComponent implements OnInit {\r\n\r\n    private form;\r\n\r\n    private _branches;\r\n\r\n    private _zones;\r\n\r\n    private _userId;\r\n\r\n    private _user;\r\n\r\n    private _options = {\r\n        position: [\"top\", \"right\"],\r\n        timeOut: 9000,\r\n        lastOnBottom: true\r\n    }\r\n\r\n    constructor(\r\n              private _storageService: StorageService,\r\n              private _router: Router,\r\n              private _notification: NotificationsService,\r\n              private _fb: FormBuilder,\r\n              private _userService: UserService,\r\n              private _branchService: BranchService,\r\n              private _zoneService: ZoneService,\r\n              private _activatedRoute: ActivatedRoute){}\r\n\r\n    ngOnInit(){\r\n\r\n        this._activatedRoute.params.subscribe( params => this._userId = params['userId'] );\r\n\r\n        this._branchService.getBranches().subscribe(\r\n            result => this._branches = result.branches,\r\n            error => this._notification.error('Error', error)\r\n        );\r\n\r\n        this._zoneService.getZones().subscribe(\r\n            result => this._zones = result.zones,\r\n            error => console.log(error)//this._notification.error('Error', error)\r\n        );\r\n        \r\n        this.form = this._fb.group({\r\n            first_name: ['', Validators.required],\r\n            last_name: ['', Validators.required],\r\n            email: ['', Validators.compose([Validators.required, CustomValidator.mailFormat])],\r\n            password: ['', Validators.required],\r\n            company: ['', Validators.required],\r\n            branch_id: ['', Validators.required],\r\n            role: ['', Validators.required],\r\n            zone_id: [\r\n                '',\r\n                Validators.compose([\r\n                    ConditionalValidator.conditional(\r\n                        group => group.controls.role.value == 'zonal',\r\n                        Validators.required\r\n                    )\r\n                ])\r\n            ]\r\n        });\r\n\r\n        if(this._userId > 0) this.getUser(this._userId);\r\n    }\r\n\r\n    add(model: AddUserInterface, isValid: boolean){\r\n        //if(!isValid) return;\r\n        //console.log(model);\r\n        this._userService.addUser(model, this._userId).subscribe(\r\n            result => this._notification.success('Success', result.success),\r\n            error => this._notification.error('Error', error)\r\n        );\r\n    }\r\n\r\n    getUser(userId = 0){\r\n\r\n        this._userService.getUsers(userId).subscribe(\r\n            result => {\r\n                this._user = result.resource;\r\n                \r\n                this.initFormGroup(this.form, { \r\n                        first_name: this._user.first_name,\r\n                        last_name: this._user.last_name,\r\n                        email: this._user.email,\r\n                        company: this._user.company,\r\n                        branch_id: this._user.branch_user[0].branch_id,\r\n                        role: this._user.role,\r\n                        zone_id: (this._user.role=='zonal' || this._user.role=='branch')? this._user.role_branch_zone_id : undefined\r\n                    } \r\n                );\r\n\r\n            },\r\n            error => console.log(error)//this._notification.error('Error', error)\r\n        );\r\n\r\n    }\r\n\r\n    initFormGroup(form: FormGroup, data: any) {\r\n\r\n        for(var key in form.controls) {\r\n            //console.log(key);\r\n            if(form.controls[key] instanceof FormControl) {\r\n                if(data[key]){\r\n                let control = <FormControl>form.controls[key];\r\n                this.initFormControl(control,data[key]);\r\n                }\r\n            } else if(form.controls[key] instanceof FormGroup) {\r\n                if(data[key]){\r\n                this.initFormGroup(<FormGroup>form.controls[key],data[key]);\r\n                }\r\n             } \r\n             //else if(form.controls[key] instanceof FormArray) {\r\n            //     var control = <FormArray>form.controls[key];\r\n            //     if(data[key])\r\n            //     this.initFormArray(control, data[key]);\r\n            // }\r\n            }\r\n      }\r\n\r\n    //   initFormArray(array: FormArray, data: Array<any>){\r\n    //     if(data.length>0){\r\n    //         var clone = array.controls[0];\r\n    //         array.removeAt(0);\r\n    //         for(var idx in data) {\r\n    //             array.push(_.cloneDeep(clone));\r\n    //             if(clone instanceof FormGroup)\r\n    //             this.initFormGroup(<FormGroup>array.controls[idx], data[idx]);\r\n    //             else if(clone instanceof FormControl)\r\n    //             this.initFormControl(<FormControl>array.controls[idx], data[idx]);\r\n    //             else if(clone instanceof FormArray)\r\n    //             this.initFormArray(<FormArray>array.controls[idx], data[idx]);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    initFormControl(control: FormControl, value:any){\r\n        control.setValue(value);\r\n    }\r\n\r\n }\r\n"],"sourceRoot":"/source/"}