{"version":3,"sources":["admin2/user/add/add-user.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA0FA;gBAYI,0BACkB,eAA+B,EAC/B,OAAe,EACf,aAAmC,EACnC,GAAgB,EAChB,YAAyB,EACzB,cAA6B;oBAL7B,oBAAe,GAAf,eAAe,CAAgB;oBAC/B,YAAO,GAAP,OAAO,CAAQ;oBACf,kBAAa,GAAb,aAAa,CAAsB;oBACnC,QAAG,GAAH,GAAG,CAAa;oBAChB,iBAAY,GAAZ,YAAY,CAAa;oBACzB,mBAAc,GAAd,cAAc,CAAe;oBAZvC,aAAQ,GAAG;wBACf,QAAQ,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC;wBAC1B,OAAO,EAAE,IAAI;wBACb,YAAY,EAAE,IAAI;qBACrB,CAAA;gBAQgD,CAAC;gBAElD,mCAAQ,GAAR;oBAAA,iBAcC;oBAbG,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,SAAS,CACvC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,EAAhC,CAAgC,EAC1C,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,EAAxC,CAAwC,CACpD,CAAA;oBACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;wBACvB,UAAU,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;wBACrC,SAAS,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;wBACpC,KAAK,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,OAAO,CAAC,CAAC,kBAAU,CAAC,QAAQ,EAAE,0CAAe,CAAC,UAAU,CAAC,CAAC,CAAC;wBAClF,QAAQ,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;wBACnC,OAAO,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;wBAClC,SAAS,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;wBACpC,KAAK,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;qBACnC,CAAC,CAAC;gBACP,CAAC;gBAED,8BAAG,GAAH,UAAI,KAAuB,EAAE,OAAgB;oBAA7C,iBAOC;oBANG,sBAAsB;oBACtB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACnB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,SAAS,CACtC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,EAArD,CAAqD,EAC/D,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,EAAxC,CAAwC,CACpD,CAAC;gBACN,CAAC;gBA3HL;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,aAAa;wBACvB,QAAQ,EACT,q1IA0EE;qBACJ,CAAC;;oCAAA;gBA+CD,uBAAC;YAAD,CA7CD,AA6CE,IAAA;YA7CF,+CA6CE,CAAA","file":"admin2/user/add/add-user.component.js","sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit, OnDestroy  } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { StorageService } from '../../../shared/storage/storage.service';\r\nimport { NotificationsService } from 'angular2-notifications';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { CustomValidator } from '../../../shared/validator/custom-validator.service';\r\nimport { UserService } from '../user.service';\r\nimport { AddUserInterface } from './add-user.model';\r\nimport { BranchService } from '../../branch/branch.service';\r\n\r\n@Component({\r\n    selector: 'my-add-user',\r\n    template:\r\n   `\r\n   <simple-notifications [options]=\"_options\"></simple-notifications>\r\n\r\n   <my-content [title]=\"'Add User'\">\r\n        <div class=\"content\">\r\n            <form autocomplete=\"off\" [formGroup]=\"form\" (ngSubmit)=\"add(form.value, form.valid)\" novalidate>\r\n\r\n                <div class=\"row\">\r\n\r\n                    <div class=\"col-md-6\">\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>First Name</label>\r\n                            <input type=\"text\" formControlName=\"first_name\" class=\"form-control\" placeholder=\"First name\">\r\n                            <small [hidden]=\"form.controls.first_name.pristine || !form.controls.first_name.hasError('required')\" class=\"inputError\">First name is required.</small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Email</label>\r\n                            <input type=\"email\" formControlName=\"email\" class=\"form-control\" placeholder=\"Email\">\r\n                            <small [hidden]=\"form.controls.email.pristine || !form.controls.email.hasError('required')\" class=\"inputError\">Email is required.</small>\r\n                            <small [hidden]=\"!form.controls.email.hasError('incorrectMailFormat')\" class=\"inputError\">Email format should be <i>example@example.com</i>.</small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Branch</label>\r\n                            <select formControlName=\"branch_id\" class=\"form-control\">\r\n                                <option [value]=\"''\">--Select Branch--</option>\r\n                                <option [value]=\"branch.id\" *ngFor=\"let branch of _branches\">{{branch.name}}</option>\r\n                            </select>\r\n                            <small [hidden]=\"form.controls.branch_id.pristine || !form.controls.branch_id.hasError('required')\" class=\"inputError\">Branch name is required.</small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Company</label>\r\n                            <input type=\"text\" formControlName=\"company\" class=\"form-control\" placeholder=\"Last name\">\r\n                            <small [hidden]=\"form.controls.company.pristine || !form.controls.company.hasError('required')\" class=\"inputError\">Last name is required.</small>\r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                    <div class=\"col-md-6\">\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Last Name</label>\r\n                            <input type=\"text\" formControlName=\"last_name\" class=\"form-control\" placeholder=\"Last name\">\r\n                            <small [hidden]=\"form.controls.last_name.pristine || !form.controls.last_name.hasError('required')\" class=\"inputError\">Last name is required.</small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Password</label>\r\n                            <input type=\"password\" formControlName=\"password\" class=\"form-control\" placeholder=\"Password\">\r\n                            <small [hidden]=\"form.controls.password.pristine || !form.controls.password.hasError('required')\" class=\"inputError\">Password is required.</small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Admin</label>\r\n                            <select formControlName=\"admin\" class=\"form-control\">\r\n                                <option [value]=\"0\">No</option>\r\n                                <option [value]=\"1\">Yes</option>\r\n                            </select>\r\n                            <small [hidden]=\"form.controls.admin.pristine || !form.controls.admin.hasError('required')\" class=\"inputError\">User's admin status is required.</small>\r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                <button type=\"submit\" class=\"btn btn-info btn-fill pull-left\" [disabled]=\"!form.valid\">Add User</button>\r\n                <div class=\"clearfix\"></div>\r\n            </form>\r\n        </div>\r\n    </my-content>\r\n    `\r\n})\r\n\r\nexport class AddUserComponent implements OnInit {\r\n\r\n    private form;\r\n\r\n    private _branches;\r\n\r\n    private _options = {\r\n        position: [\"top\", \"right\"],\r\n        timeOut: 9000,\r\n        lastOnBottom: true\r\n    }\r\n\r\n    constructor(\r\n              private _storageService: StorageService,\r\n              private _router: Router,\r\n              private _notification: NotificationsService,\r\n              private _fb: FormBuilder,\r\n              private _userService: UserService,\r\n              private _branchService: BranchService){}\r\n\r\n    ngOnInit(){\r\n        this._branchService.getBranches().subscribe(\r\n            result => this._branches = result.branches,\r\n            error => this._notification.error('Error', error)\r\n        )\r\n        this.form = this._fb.group({\r\n            first_name: ['', Validators.required],\r\n            last_name: ['', Validators.required],\r\n            email: ['', Validators.compose([Validators.required, CustomValidator.mailFormat])],\r\n            password: ['', Validators.required],\r\n            company: ['', Validators.required],\r\n            branch_id: ['', Validators.required],\r\n            admin: ['', Validators.required]\r\n        });\r\n    }\r\n\r\n    add(model: AddUserInterface, isValid: boolean){\r\n        //if(!isValid) return;\r\n        console.log(model);\r\n        this._userService.addUser(model).subscribe(\r\n            result => this._notification.success('Success', result.success),\r\n            error => this._notification.error('Error', error)\r\n        );\r\n    }\r\n\r\n }\r\n"],"sourceRoot":"/source/"}