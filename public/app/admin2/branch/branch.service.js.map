{"version":3,"sources":["admin2/branch/branch.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAOA;gBAQE,uBACsB,IAAU,EACV,QAAwB;oBADxB,SAAI,GAAJ,IAAI,CAAM;oBACV,aAAQ,GAAR,QAAQ,CAAgB;oBARtC,YAAO,GAAG,kBAAkB,CAAC;oBAE7B,yBAAoB,GAAG,wBAAwB,CAAC;gBAMP,CAAC;gBAGlD,mCAAW,GAAX;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,OAAO,CAAE;yBACnB,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAE7C,CAAC;gBAED,iCAAS,GAAT,UAAU,MAAM;oBAEZ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAE,MAAM,CAAE,CAAE;yBAC9C,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAE7C,CAAC;gBAED,yCAAiB,GAAjB,UAAkB,QAAQ,EAAE,QAAQ;oBAEhC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAE,EAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAC,CAAE,CAAE;yBAC/F,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC7C,CAAC;gBAED,2CAAmB,GAAnB,UAAoB,QAAQ,EAAE,QAAQ;oBAElC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,oBAAoB,GAAG,cAAW,QAAQ,gBAAW,QAAQ,CAAE,CAAC;yBAC1E,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAE7C,CAAC;gBAEO,mCAAW,GAAnB,UAAoB,GAAa;oBAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAG,CAAC;gBAC7B,CAAC;gBAEO,mCAAW,GAAnB,UAAqB,KAAU;oBAE3B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;wBAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;oBAE1E,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAEpC,CAAC;gBAvDH;oBAAC,iBAAU,EAAE;;iCAAA;gBAyDb,oBAAC;YAAD,CAxDA,AAwDC,IAAA;YAxDD,yCAwDC,CAAA","file":"admin2/branch/branch.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/Rx';\r\nimport { StorageService } from '../../shared/storage/storage.service'; \r\n\r\n@Injectable()\r\nexport class BranchService {\r\n  \r\n  private _apiUrl = '/api/v1/branches';\r\n\r\n  private _branchSurveysApiUrl = '/api/v1/branch_surveys';\r\n\r\n  redirectUrl: string;//store the URL so we can redirect after logging in\r\n\r\n  constructor(\r\n                private http: Http,\r\n                private _storage: StorageService) {}\r\n\r\n  \r\n  getBranches(): Observable<any>{\r\n      return this.http.get( this._apiUrl )\r\n                      .map(this.extractData)\r\n                      .catch(this.handleError);\r\n      \r\n  }\r\n\r\n  addBranch(branch): Observable<any>{\r\n      \r\n      return this.http.post( this._apiUrl, JSON.stringify( branch ) )\r\n                      .map(this.extractData)\r\n                      .catch(this.handleError);\r\n      \r\n  }\r\n\r\n  saveBranchSurveys(surveyId, branchId): Observable<any>{\r\n\r\n      return this.http.post( this._branchSurveysApiUrl, JSON.stringify( {survey_id: surveyId, branch_id: branchId} ) )\r\n                      .map(this.extractData)\r\n                      .catch(this.handleError);\r\n  }\r\n\r\n  removeBranchSurveys(surveyId, branchId): Observable<any>{\r\n\r\n      return this.http.get( this._branchSurveysApiUrl + `/survey/${surveyId}/branch/${branchId}`)\r\n                      .map(this.extractData)\r\n                      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  private extractData(res: Response) {\r\n      return res.json() || { };\r\n  }\r\n\r\n  private handleError (error: any) {\r\n      \r\n      let errMsg = (error.message) ? error.message :\r\n        error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n\r\n      return Observable.throw(errMsg);\r\n\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}