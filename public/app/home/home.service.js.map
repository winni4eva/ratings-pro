{"version":3,"sources":["home/home.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAOA;gBAME,qBACsB,IAAU,EACV,QAAwB;oBADxB,SAAI,GAAJ,IAAI,CAAM;oBACV,aAAQ,GAAR,QAAQ,CAAgB;oBANtC,YAAO,GAAG,iBAAiB,CAAC;oBAE5B,gBAAW,GAAG,eAAe,CAAC;gBAIW,CAAC;gBAElD,+BAAS,GAAT,UAAU,MAAM;oBAEZ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAE,MAAM,CAAE,CAAE;yBAC9C,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAE7C,CAAC;gBAED,oCAAc,GAAd;oBAEI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,WAAW,GAAG,mBAAmB,CAAE;yBAC7C,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAE7C,CAAC;gBAEO,iCAAW,GAAnB,UAAoB,GAAa;oBAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAG,CAAC;gBAC7B,CAAC;gBAEO,iCAAW,GAAnB,UAAqB,KAAU;oBAE3B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;wBAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;oBAE1E,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAEpC,CAAC;gBAtCH;oBAAC,iBAAU,EAAE;;+BAAA;gBAwCb,kBAAC;YAAD,CAvCA,AAuCC,IAAA;YAvCD,qCAuCC,CAAA","file":"home/home.service.js","sourcesContent":["import { Injectable, OnInit, OnDestroy } from '@angular/core';\r\nimport { Http, Headers, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/Rx';\r\nimport { StorageService } from '../shared/storage/storage.service'; \r\n\r\n@Injectable()\r\nexport class HomeService{\r\n  \r\n  private _apiUrl = '/api/v1/ratings';\r\n\r\n  private _userApiUrl = '/api/v1/users';\r\n\r\n  constructor(\r\n                private http: Http,\r\n                private _storage: StorageService) {}\r\n  \r\n  addRating(rating): Observable<any>{\r\n      \r\n      return this.http.post( this._apiUrl, JSON.stringify( rating ) )\r\n                      .map(this.extractData)\r\n                      .catch(this.handleError);\r\n      \r\n  }\r\n\r\n  getUserSurveys(): Observable<any>{\r\n      \r\n      return this.http.get( this._userApiUrl + `?resource=surveys` )\r\n                      .map(this.extractData)\r\n                      .catch(this.handleError);\r\n      \r\n  }\r\n\r\n  private extractData(res: Response) {\r\n      return res.json() || { };\r\n  }\r\n\r\n  private handleError (error: any) {\r\n      \r\n      let errMsg = (error.message) ? error.message :\r\n        error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n\r\n      return Observable.throw(errMsg);\r\n\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}