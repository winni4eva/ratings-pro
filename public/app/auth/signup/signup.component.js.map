{"version":3,"sources":["auth/signup/signup.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAuFA;gBAII,yBACoB,YAAyB,EACzB,GAAgB;oBADhB,iBAAY,GAAZ,YAAY,CAAa;oBACzB,QAAG,GAAH,GAAG,CAAa;gBAAE,CAAC;gBAEvC,gCAAM,GAAN,UAAO,KAAsB,EAAE,OAAgB;oBAE3C,EAAE,CAAA,CAAC,CAAC,OAAO,CAAC;wBAAC,MAAM,CAAC;oBAEpB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC;yBAC9B,SAAS,CAAE,UAAA,QAAQ;wBACZ,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAC1B,CAAC,EACD,UAAA,KAAK;wBACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACvB,CAAC,CACJ,CAAC;gBACV,CAAC;gBAED,kCAAQ,GAAR;oBAEI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;wBAC9B,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,kBAAU,CAAC,QAAQ,EAAE,0CAAe,CAAC,UAAU,CAAC,CAAE;wBAC/D,UAAU,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;wBACrC,SAAS,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;wBACpC,OAAO,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;wBAClC,SAAS,EAAE,IAAI,CAAC,sBAAsB,EAAE;qBAC3C,CAAC,CAAC;oBAEH,IAAI,CAAC,oCAAoC,EAAE,CAAC;gBAChD,CAAC;gBAED,8DAAoC,GAApC;oBAAA,iBAUC;oBATG,IAAM,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC;oBAEhF,mBAAmB,CAAC,SAAS,CAAC,UAAA,CAAC;wBAC3B,EAAE,CAAA,CAAC,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,qBAAqB,CAAC;4BACtC,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;wBAC7F,IAAI;4BACA,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC,SAAS,CAAC,EAAE,UAAU,EAAG,IAAI,EAAC,CAAC,CAAC;oBAEjH,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,gDAAsB,GAAtB;oBACI,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;wBACG,QAAQ,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;wBACnC,qBAAqB,EAAE,CAAC,EAAE,EAAC,kBAAU,CAAC,QAAQ,CAAC;qBAClD,CAAC,CAAC;oBAE/B,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAvIL;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,WAAW;wBACrB,QAAQ,EAAE,isLA4ET;qBACJ,CAAC;;mCAAA;gBAyDF,sBAAC;YAAD,CAvDA,AAuDC,IAAA;YAvDD,6CAuDC,CAAA","file":"auth/signup/signup.component.js","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport {FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { CustomValidator } from '../../shared/validator/custom-validator.service';\r\nimport { SignUpInterface } from './signup.interface';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n    selector: 'my-signup',\r\n    template: `\r\n        <style>\r\n            .myLabel{margin:0px !important;}\r\n            .myInput{\r\n                width:100% !important;\r\n                height:80% !important;\r\n                outline:none !important;\r\n                font-size:20px !important;\r\n            }\r\n            .inputError{color:red}\r\n        </style>    \r\n\r\n      <div class=\"logmod__tab lgm-1\">\r\n            <div class=\"logmod__heading\">\r\n                <span class=\"logmod__heading-subtitle\">Enter your personal details <strong>to create an acount</strong></span>\r\n            </div>\r\n            <div class=\"logmod__form\">\r\n                <form autocomplete=\"off\" [formGroup]=\"_signUpForm\" (ngSubmit)=\"signup(_signUpForm.value, _signUpForm.valid)\" novalidate class=\"simform\">\r\n                    \r\n                    <div class=\"sminputs\">\r\n                        <div class=\"input full\">\r\n                            <!--<label class=\"string optional myLabel\" for=\"email\" *ngIf=\"!_signUpForm.controls.email.hasError('required') && !_signUpForm.controls.email.hasError('incorrectMailFormat')\">Email*</label>-->\r\n                            \r\n                            <input class=\"string optional myInput\" formControlName=\"email\" id=\"email\" name=\"email\" placeholder=\"Email\" type=\"email\" />\r\n                            \r\n                            <small [hidden]=\"_signUpForm.controls.email.pristine || !_signUpForm.controls.email.hasError('required')\" class=\"inputError\">Email is required.</small>\r\n                            <small [hidden]=\"!_signUpForm.controls.email.hasError('incorrectMailFormat')\" class=\"inputError\">Email format should be <i>example@example.com</i>.</small>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"sminputs\">\r\n                        <div class=\"input full\">\r\n                            <!--<label class=\"string optional\" for=\"first_name\">Last Name*</label>-->\r\n                            <input class=\"string optional myInput\" formControlName=\"first_name\" id=\"first_name\" name=\"first_name\" placeholder=\"First Name\" type=\"text\" />\r\n                            <small [hidden]=\"_signUpForm.controls.first_name.pristine || !_signUpForm.controls.first_name.hasError('required')\" class=\"inputError\">First name is required.</small>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"sminputs\">\r\n                        <div class=\"input full\">\r\n                            <!--<label class=\"string optional\" for=\"last_name\">Last Name*</label>-->\r\n                            <input class=\"string optional myInput\" formControlName=\"last_name\" id=\"last_name\" name=\"last_name\" placeholder=\"Last Name\" type=\"text\" />\r\n                            <small [hidden]=\"_signUpForm.controls.last_name.pristine || !_signUpForm.controls.last_name.hasError('required')\" class=\"inputError\">Last name is required.</small>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"sminputs\">\r\n                        <div class=\"input full\">\r\n                            <!--<label class=\"string optional\" for=\"company\">Company*</label>-->\r\n                            <input class=\"string optional myInput\" formControlName=\"company\" id=\"company\" name=\"company\" placeholder=\"Company\" type=\"text\" />\r\n                            <small [hidden]=\"_signUpForm.controls.company.pristine || !_signUpForm.controls.company.hasError('required')\" class=\"inputError\">Company is required.</small>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"sminputs\" formGroupName=\"passwords\">\r\n                        <div class=\"input string optional\">\r\n                            <!--<label class=\"string optional\" for=\"user-pw\">Password *</label>-->\r\n                            <input class=\"string optional myInput\" formControlName=\"password\" id=\"user-pw\" placeholder=\"Password\" type=\"password\" />\r\n                            <small [hidden]=\"_signUpForm.controls.passwords.controls.password.pristine || !_signUpForm.controls.passwords.controls.password.hasError('required')\" class=\"inputError\">Password is required.</small>\r\n                        </div>\r\n                        <div class=\"input string optional\">\r\n                            <!--<label class=\"string optional\" for=\"user-pw-repeat\">Repeat password *</label>-->\r\n                            <input class=\"string optional myInput\" formControlName=\"password_confirmation\" id=\"user-pw-repeat\" placeholder=\"Repeat password\" type=\"password\" />\r\n                            <small [hidden]=\"_signUpForm.controls.passwords.controls.password_confirmation.pristine || !_signUpForm.controls.passwords.controls.password_confirmation.hasError('required')\" class=\"inputError\">Password confirm is required.</small>\r\n                            <small [hidden]=\"_signUpForm.controls.passwords.controls.password_confirmation.pristine || !_signUpForm.controls.passwords.controls.password_confirmation.hasError('notValid')\" class=\"inputError\">Password mismatch.</small>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"simform__actions\">\r\n                        <button class=\"sumbit\" type=\"sumbit\" [disabled]=\"!_signUpForm.valid\">Create Account</button>\r\n                        <span class=\"simform__actions-sidetext\">By creating an account you agree to our <a class=\"special\" href=\"#\" target=\"_blank\" role=\"link\">Terms & Privacy</a></span>\r\n                    </div> \r\n\r\n                </form>\r\n            </div>  \r\n        </div>\r\n    `\r\n})\r\n\r\nexport class SignUpComponent implements OnInit {\r\n\r\n    private _signUpForm;\r\n\r\n    constructor(\r\n                private _authService: AuthService,\r\n                private _fb: FormBuilder){}\r\n\r\n    signup(model: SignUpInterface, isValid: boolean){\r\n\r\n        if(!isValid) return;\r\n\r\n        this._authService.postSignUp(model)\r\n            .subscribe( response => {\r\n                    console.log(response); \r\n                },\r\n                error => {\r\n                    console.log(error);\r\n                }\r\n            );\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this._signUpForm = this._fb.group({\r\n            email: ['', [Validators.required, CustomValidator.mailFormat] ],\r\n            first_name: ['', Validators.required],\r\n            last_name: ['', Validators.required],\r\n            company: ['', Validators.required],\r\n            passwords: this.initPasswordsFormGroup()\r\n        });\r\n\r\n        this.subscribeToFormChangesAndSetValidity();\r\n    }\r\n\r\n    subscribeToFormChangesAndSetValidity() {\r\n        const myFormValueChanges$ = this._signUpForm.controls[\"passwords\"].valueChanges;\r\n\r\n        myFormValueChanges$.subscribe(x => {\r\n            if(x.password === x.password_confirmation)\r\n                this._signUpForm.controls[\"passwords\"].controls[\"password_confirmation\"].setErrors(null);\r\n            else \r\n                this._signUpForm.controls[\"passwords\"].controls[\"password_confirmation\"].setErrors({ \"notValid\" : true});\r\n            \r\n        });\r\n    }\r\n\r\n    initPasswordsFormGroup() {\r\n        const group = this._fb.group({\r\n                                        password: ['', Validators.required],\r\n                                        password_confirmation: ['',Validators.required]\r\n                                    });\r\n\r\n        return group;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}