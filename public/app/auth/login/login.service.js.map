{"version":3,"sources":["auth/login/login.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAOA;gBAME,sBACsB,IAAU,EACV,QAAwB;oBADxB,SAAI,GAAJ,IAAI,CAAM;oBACV,aAAQ,GAAR,QAAQ,CAAgB;oBANtC,gBAAW,GAAY,KAAK,CAAC;gBAMY,CAAC;gBAGlD,gCAAS,GAAT,UAAU,YAAY;oBAElB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,YAAY,EAAE,IAAI,CAAC,SAAS,CAAE,YAAY,CAAE,CAAE;yBACpD,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAE7C,CAAC;gBAED,gCAAS,GAAT;oBAEI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC;yBACrB,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC3C,CAAC;gBAED,qCAAc,GAAd,UAAe,IAAI;oBACf,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;oBACxC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBACtD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBACrC,CAAC;gBAED,uCAAgB,GAAhB;oBACI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBAC/B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;oBAC9B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAClC,CAAC;gBAED,oCAAa,GAAb;oBACI,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACxC,CAAC;gBAEO,kCAAW,GAAnB,UAAoB,GAAa;oBAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAG,CAAC;gBAC7B,CAAC;gBAEO,kCAAW,GAAnB,UAAqB,KAAU;oBAE3B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;wBAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;oBAE1E,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAEpC,CAAC;gBAtDH;oBAAC,iBAAU,EAAE;;gCAAA;gBAwDb,mBAAC;YAAD,CAvDA,AAuDC,IAAA;YAvDD,uCAuDC,CAAA","file":"auth/login/login.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/Rx';\r\nimport { StorageService } from '../../shared/storage/storage.service'; \r\n\r\n@Injectable()\r\nexport class LoginService {\r\n\r\n  private _isLoggedIn: boolean = false;\r\n\r\n  redirectUrl: string;//store the URL so we can redirect after logging in\r\n\r\n  constructor(\r\n                private http: Http,\r\n                private _storage: StorageService) {}\r\n\r\n\r\n  postLogin(loginDetails): Observable<any>{\r\n\r\n      return this.http.post( '/api/login', JSON.stringify( loginDetails ) )\r\n                      .map(this.extractData)\r\n                      .catch(this.handleError);\r\n      \r\n  }\r\n\r\n  getLogout() {\r\n      \r\n      return this.http.get('/api/logout/')\r\n                    .map(this.extractData)\r\n                    .catch(this.handleError);\r\n  }\r\n\r\n  setAuthDetails(data){\r\n      this._storage.set('rToken', data.token);\r\n      this._storage.set('rUser', JSON.stringify(data.user));\r\n      this._storage.set('rAuth', true);\r\n  }\r\n\r\n  cleanAuthDetails(){\r\n      this._storage.remove('rToken');\r\n      this._storage.remove('rUser');\r\n      this._storage.remove('rAuth');\r\n  }\r\n\r\n  getIsLoggedIn(){\r\n      return !!this._storage.get('rAuth');\r\n  }\r\n\r\n  private extractData(res: Response) {\r\n      return res.json() || { };\r\n  }\r\n\r\n  private handleError (error: any) {\r\n      \r\n      let errMsg = (error.message) ? error.message :\r\n        error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n\r\n      return Observable.throw(errMsg);\r\n\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}