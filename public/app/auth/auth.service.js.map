{"version":3,"sources":["auth/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;YAMA;gBAQE,qBACsB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;oBAPxB,eAAU,GAAW,UAAU,CAAC;oBAEhC,eAAU,GAAY,KAAK,CAAC;gBAKD,CAAC;gBAGpC,+BAAS,GAAT,UAAU,YAAY;oBAElB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,YAAY,EAAE,IAAI,CAAC,SAAS,CAAE,YAAY,CAAE,CAAE;yBACpD,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAE7C,CAAC;gBAED,gCAAU,GAAV,UAAW,aAAa;oBAEpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,aAAa,EAAE,IAAI,CAAC,SAAS,CAAE,aAAa,CAAE,CAAC;yBACrD,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC7C,CAAC;gBAED,+BAAS,GAAT;oBAEI,IAAI,OAAO,GAAG,IAAI,cAAO,CAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,eAAe,EAAE,SAAS,GAAK,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAE,CAAC;oBACvI,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;oBAEjE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC;yBAC9B,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;yBACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBACzB,iDAAiD;gBACnE,CAAC;gBAEO,iCAAW,GAAnB,UAAoB,GAAa;oBAC7B,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAG,CAAC;gBAC7B,CAAC;gBAEO,iCAAW,GAAnB,UAAqB,KAAU;oBAE3B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;wBAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;oBAE1E,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAEpC,CAAC;gBAlDH;oBAAC,iBAAU,EAAE;;+BAAA;gBAoDb,kBAAC;YAAD,CAnDA,AAmDC,IAAA;YAnDD,qCAmDC,CAAA","file":"auth/auth.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/Rx';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n\r\n  private apiAuthUrl: string = '/api/v1/';\r\n\r\n  private isLoggedIn: boolean = false;\r\n\r\n  redirectUrl: string;//store the URL so we can redirect after logging in\r\n\r\n  constructor(\r\n                private http: Http) {}\r\n\r\n\r\n  postLogin(loginDetails): Observable<any>{\r\n\r\n      return this.http.post( '/api/login', JSON.stringify( loginDetails ) )\r\n                      .map(this.extractData)\r\n                      .catch(this.handleError);\r\n      \r\n  }\r\n\r\n  postSignUp(signUpDetails): Observable<any>{\r\n\r\n      return this.http.post( '/api/signup', JSON.stringify( signUpDetails ))\r\n                      .map(this.extractData)\r\n                      .catch(this.handleError);\r\n  }\r\n\r\n  getLogout() {\r\n      \r\n      let headers = new Headers( { 'Content-Type': 'application/json', 'Authorization': 'Bearer '  +  localStorage.getItem('auth_token') } );\r\n      let options = new RequestOptions({ headers: headers, body: '' });\r\n      \r\n      return this.http.get('/api/logout/', options)\r\n                    .map(this.extractData)\r\n                    .catch(this.handleError);\r\n                    //.subscribe(this.extractData, this.handleError);\r\n  }\r\n\r\n  private extractData(res: Response) {\r\n      return res.json() || { };\r\n  }\r\n\r\n  private handleError (error: any) {\r\n      \r\n      let errMsg = (error.message) ? error.message :\r\n        error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n\r\n      return Observable.throw(errMsg);\r\n\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}