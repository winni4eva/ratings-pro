{"version":3,"sources":["shared/modal/modal.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;YAIA;gBAGI;oBACI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;gBACrB,CAAC;gBAED,oCAAa,GAAb,UAAc,QAAe;oBACzB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBAE7C,uCAAuC;oBACvC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACR,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;oBACnD,CAAC;oBAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC/B,CAAC;gBAED,2BAAI,GAAJ,UAAK,OAAe;oBAChB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;oBAEpC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACR,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;wBAC3B,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;oBACxB,CAAC;oBAAA,IAAI,CAAA,CAAC;wBACF,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;oBACtC,CAAC;gBACL,CAAC;gBAED,4BAAK,GAAL,UAAM,OAAe,EAAE,aAAqB;oBAArB,6BAAqB,GAArB,qBAAqB;oBACxC,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;oBAEpC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACR,EAAE,CAAC,CAAC,aAAa,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;4BAClC,MAAM,CAAC;wBACX,CAAC;wBAED,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;oBACzB,CAAC;gBACL,CAAC;gBAEO,gCAAS,GAAjB,UAAkB,OAAe;oBAC7B,GAAG,CAAC,CAAc,UAAW,EAAX,KAAA,IAAI,CAAC,MAAM,EAAX,cAAW,EAAX,IAAW,CAAC;wBAAzB,IAAI,KAAK,SAAA;wBACV,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC,CAAC;4BAC5B,MAAM,CAAC,KAAK,CAAC;wBACjB,CAAC;qBACJ;oBAED,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAlDL;oBAAC,iBAAU,EAAE;;gCAAA;gBAmDb,mBAAC;YAAD,CAlDA,AAkDC,IAAA;YAlDD,uCAkDC,CAAA","file":"shared/modal/modal.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Modal } from './modal.component';\r\n\r\n@Injectable()\r\nexport class ModalService {\r\n    private modals: Array<Modal>;\r\n\r\n    constructor() {\r\n        this.modals = [];\r\n    }\r\n\r\n    registerModal(newModal: Modal): void {\r\n        var modal = this.findModal(newModal.modalId);\r\n\r\n        // Delete existing to replace the modal\r\n        if (modal) {\r\n            this.modals.splice(this.modals.indexOf(modal));\r\n        }\r\n\r\n        this.modals.push(newModal);\r\n    }\r\n\r\n    open(modalId: string): void {\r\n        var modal = this.findModal(modalId);\r\n\r\n        if (modal) {\r\n            console.log(\"Found modal\");\r\n            modal.isOpen = true;\r\n        }else{\r\n            console.log(\"Did not find modal\");\r\n        }\r\n    }\r\n\r\n    close(modalId: string, checkBlocking = false): void {\r\n        var modal = this.findModal(modalId);\r\n\r\n        if (modal) {\r\n            if (checkBlocking && modal.blocking) {\r\n                return;\r\n            }\r\n\r\n            modal.isOpen = false;\r\n        }\r\n    }\r\n\r\n    private findModal(modalId: string): Modal {\r\n        for (var modal of this.modals) {\r\n            if (modal.modalId === modalId) {\r\n                return modal;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}"],"sourceRoot":"/source/"}