{"version":3,"sources":["shared/validator/conditional-required.service.ts"],"names":[],"mappings":";;;;IAcA,6BAA6B,OAAO;QAChC,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC9D,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC;YACpC,OAAO,CAAC,OAAO;iBACV,YAAY;iBACZ,oBAAoB,CAAC,UAAC,CAAC,EAAE,CAAC;gBACvB,kFAAkF;gBAClF,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACnE,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAChB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACd,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACf,MAAM,CAAC,KAAK,CAAC;wBACjB,CAAC;oBACL,CAAC;gBACL,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC,CAAC;iBACD,SAAS,CAAC;gBACP,OAAO,CAAC,sBAAsB,EAAE,CAAC;YACrC,CAAC,CAAC,CAAC;YAEP,OAAO,CAAC,sBAAsB,EAAE,CAAC;QACrC,CAAC;QACD,MAAM,CAAC;IACX,CAAC;;;;YAzCD;gBAAA;gBAYA,CAAC;gBAXU,gCAAW,GAAlB,UAAmB,WAAW,EAAE,SAAS;oBACrC,MAAM,CAAC,UAAS,OAAO;wBACnB,mBAAmB,CAAC,OAAO,CAAC,CAAC;wBAE7B,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;4BAC7B,EAAE,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gCAC/B,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;4BAC9B,CAAC;wBACL,CAAC;oBACL,CAAC,CAAC;gBACN,CAAC;gBACL,2BAAC;YAAD,CAZA,AAYC,IAAA;YAZD,uDAYC,CAAA","file":"shared/validator/conditional-required.service.js","sourcesContent":["export class ConditionalValidator {\r\n    static conditional(conditional, validator) {\r\n        return function(control) {\r\n            revalidateOnChanges(control);\r\n\r\n            if (control && control._parent) {\r\n                if (conditional(control._parent)) {\r\n                    return validator(control);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nfunction revalidateOnChanges(control): void {\r\n    if (control && control._parent && !control._revalidateOnChanges) {\r\n        control._revalidateOnChanges = true;\r\n        control._parent\r\n            .valueChanges\r\n            .distinctUntilChanged((a, b) => {\r\n                // These will always be plain objects coming from the form, do a simple comparison\r\n                if(a && !b || !a && b) {\r\n                    return false;\r\n                } else if (a && b && Object.keys(a).length !== Object.keys(b).length) {\r\n                    return false;\r\n                } else if (a && b) {\r\n                    for (let i in a) {\r\n                        if(a[i] !== b[i]) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            })\r\n            .subscribe(() => {\r\n                control.updateValueAndValidity();\r\n            });\r\n\r\n        control.updateValueAndValidity();\r\n    }\r\n    return;\r\n}"],"sourceRoot":"/source/"}