{"version":3,"sources":["shared/pagination/pagination.service.ts"],"names":[],"mappings":"AAAA,mCAAmC;AAEnC,8BAA8B;AAC9B,qFAAqF;AACrF,mCAAmC;AACnC,6DAA6D;AAE7D,kDAAkD;AAClD,kCAAkC;AAClC,sDAAsD;AACtD,6BAA6B;AAC7B,oCAAoC;AACpC,mBAAmB;AACnB,2EAA2E;AAC3E,sCAAsC;AACtC,iCAAiC;AACjC,gCAAgC;AAChC,0DAA0D;AAC1D,8CAA8C;AAC9C,wCAAwC;AACxC,uBAAuB;AACvB,+CAA+C;AAC/C,6CAA6C;AAC7C,gBAAgB;AAChB,YAAY;AAEZ,kDAAkD;AAClD,yDAAyD;AACzD,8EAA8E;AAE9E,wEAAwE;AACxE,uDAAuD;AAEvD,0EAA0E;AAC1E,mBAAmB;AACnB,sCAAsC;AACtC,wCAAwC;AACxC,kCAAkC;AAClC,sCAAsC;AACtC,oCAAoC;AACpC,gCAAgC;AAChC,sCAAsC;AACtC,kCAAkC;AAClC,2BAA2B;AAC3B,aAAa;AACb,QAAQ;AACR,IAAI","file":"shared/pagination/pagination.service.js","sourcesContent":["// import * as _ from 'underscore';\r\n \r\n// export class PagerService {\r\n//     getPager(totalItems: number, currentPage: number = 1, pageSize: number = 10) {\r\n//         // calculate total pages\r\n//         let totalPages = Math.ceil(totalItems / pageSize);\r\n \r\n//         let startPage: number, endPage: number;\r\n//         if (totalPages <= 10) {\r\n//             // less than 10 total pages so show all\r\n//             startPage = 1;\r\n//             endPage = totalPages;\r\n//         } else {\r\n//             // more than 10 total pages so calculate start and end pages\r\n//             if (currentPage <= 6) {\r\n//                 startPage = 1;\r\n//                 endPage = 10;\r\n//             } else if (currentPage + 4 >= totalPages) {\r\n//                 startPage = totalPages - 9;\r\n//                 endPage = totalPages;\r\n//             } else {\r\n//                 startPage = currentPage - 5;\r\n//                 endPage = currentPage + 4;\r\n//             }\r\n//         }\r\n \r\n//         // calculate start and end item indexes\r\n//         let startIndex = (currentPage - 1) * pageSize;\r\n//         let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n \r\n//         // create an array of pages to ng-repeat in the pager control\r\n//         let pages = _.range(startPage, endPage + 1);\r\n \r\n//         // return object with all pager properties required by the view\r\n//         return {\r\n//             totalItems: totalItems,\r\n//             currentPage: currentPage,\r\n//             pageSize: pageSize,\r\n//             totalPages: totalPages,\r\n//             startPage: startPage,\r\n//             endPage: endPage,\r\n//             startIndex: startIndex,\r\n//             endIndex: endIndex,\r\n//             pages: pages\r\n//         };\r\n//     }\r\n// }"],"sourceRoot":"/source/"}