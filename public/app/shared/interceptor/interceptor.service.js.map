{"version":3,"sources":["shared/interceptor/interceptor.service.ts"],"names":[],"mappings":"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","file":"shared/interceptor/interceptor.service.js","sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport { Http, RequestOptions, Request,RequestOptionsArgs, ConnectionBackend, Response, Headers} from '@angular/http';\r\nimport 'rxjs/Rx';\r\nimport {Router} from '@angular/router';\r\nimport {ReflectiveInjector} from '@angular/core';\r\nimport{ StorageService } from '../storage/storage.service';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class CustomHttp extends Http{\r\n\r\n     private _storage;\r\n\r\n    constructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\r\n        super(backend, defaultOptions);\r\n        //const injector = ReflectiveInjector.resolveAndCreate([StorageService]);\r\n        //this._storage = injector.get([StorageService]);\r\n    }\r\n    \r\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\r\n      return this.intercept(super.request(url, this.getRequestOptionArgs(options)));\r\n    }\r\n\r\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.intercept(super.get(url,this.getRequestOptionArgs(options)));\r\n    }\r\n\r\n    post(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> { \r\n        return this.intercept(super.post(url, body, this.getRequestOptionArgs(options)));\r\n    }\r\n\r\n    put(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.intercept(super.put(url, body, this.getRequestOptionArgs(options)));\r\n    }\r\n\r\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.intercept(super.delete(url, this.getRequestOptionArgs(options)));\r\n    }\r\n    \r\n    getRequestOptionArgs(options?: RequestOptionsArgs) : RequestOptionsArgs {\r\n\r\n        if (options == null) {\r\n            options = new RequestOptions();\r\n        }\r\n        if (options.headers == null) {\r\n            options.headers = new Headers();\r\n        }\r\n        \r\n        options.headers.append('Content-Type', 'application/json');\r\n        options.headers.append('Authorization', 'Bearer '  +  localStorage.getItem('rToken') );\r\n        //options.headers.append('Accept', 'application/json');\r\n        return options;\r\n    }\r\n\r\n    intercept(observable: Observable<Response>): Observable<any> {\r\n        return observable.catch((err, source) => {\r\n            if (err.status  == 401 || err.status  == 404) {\r\n                localStorage.removeItem('rToken');\r\n                localStorage.removeItem('rUser');\r\n                localStorage.removeItem('rAuth');\r\n                window.location.href='#/login';\r\n                //return Observable.empty();\r\n                return Observable.throw(err);\r\n            } else {\r\n                return Observable.throw(err);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}